快速鍵:
	
	prop  tab鍵2次  產生get set
	
	
符號：
	@"Reports\Report_Demo.rdlc"  //@: ignore \

	int? variable  				 //?: 用於對int, double, bool等無法直接賦值為null的數據類型進行null的賦值
	varaible = variable ?? 0 	 //??: 用於判斷一個變量在為null時，返回一個指定的值，判斷variable為null時，返回0
	string str = null;
	str = str ?? ""				 //判斷str為null時，返回空字串

	function_name(out A, out B, out C);  //out: 以By Reference作為參數傳遞，不需要先將參數做初始化，在程式結束前初始化參數(給值)


修飾詞：
	yield return 
		配合foreach呼叫getDataByYield()，呼叫時才執行方法，回傳Ienumerable值, 回傳後繼續執行
		var list = getEvenNumByYield(myList);
		foreach(var l in list)
		{
			sum += l;
		}
		static IEnumerable<int> getDataByYield(IEnumerable<int> collection){
			foreach(var i in collection){
				if(i % 2 == 0) yield return i;
			}
		}
		限制:
		1.回傳類型必須為IEnumerable, IEnumerable<T>, IEnumerator, IEnumerator<T>
		2.不可包含任何 ref 與 out 參數
		3.匿名方法與unsafe區塊不可使用yield	
		http://limitedcode.blogspot.tw/2014/07/c-yeild.html
	
	struct

	using

	unchecked 
	checked

	lock
	
	
	
語法：
	property:
		private string? _TEST;
		public string? TEST{ get {return _TEST;} set{_TEST=value;} }
	
	
	//判斷變數是否為null或空值
		String.IsNullOrEmpty(variable)

	throw	
		throw new InvalidOperationException("error message");

	try	
		try{

		}catch (InvalidOperationException e)
		{
			e.Message;
		}
		finally{
			
		}		
		
	//string to dateTime
		Convert.ToDateTime(string)

		
委派(delegate)： https://docs.microsoft.com/zh-tw/dotnet/csharp/tour-of-csharp/delegates
	A.
		1.函式(方法)的參考
		2.將函式(方法)當作實體(instance)，可指定給變數，當作參數傳遞，或是直接引用(實體化)
		3.類似c函式指標，不同之處在於委派是物件導向且型別安全
	B.
		1.宣告，public delegate type function_name(parameters)
			    public delegate double Function(double x);
		2.只要與宣告的回傳型別(type)、參數(parameters)的資料型別、個數相同的函式就可用來參考 
		3.靜態(static)方法、執行個體方法(new出來的物件方法)，都可用來參考
				public static double[] Apply(double[] a, Function f){
					double[] result = new double[a.Length];
					for (int i = 0; i < a.Length; i++) result[i] = f(a[i]);
					return result;
				}
				double[] sines = Apply(a, Math.Sin);
				Multiplier m = new Multiplier(2.0);
				double[] doubles =  Apply(a, m.Multiply);
		4.匿名函式建立委派
				double[] doubles =  Apply(a, (double x) => x * 2.0);
		5.直接引用委派(實體化)
				public double test(double x){}
				Function function = new Function(test);	
				function.Invoke(); //等於 function();
	C.事件
		1.事件宣告: [存取修飾詞] event 委派方法 事件名稱 
				public delegate void EventHandler(object s, EventArgs e);
				public void handler(object s, EventArgs e){}
			--->public event EventHandler OnEvent;<---
				OnEvent += new EventHandler(handler); //委派實體化指向於事件
				OnEvent(this, null);
		
序列化：
	[Serializable] 		  //把物件變成可在網路上傳輸的位元組流		
	
Lambda 運算式寫法: (input parameters) => expression
	(int x, int y) => x+y;	//明確指定傳入參數的型別，適用在無法型別推斷時
	(a,b) => a+b;	//由編譯器使用型別推斷省去撰寫傳入參數型別
	x => x + 1;		//只有一個傳入參數，可以省略括號
	() => "x"+"y";	//沒有傳入參數時，須用空的圓括號


List<T>.ForEach():
	List<int> _list = new List<int>();
	_list.ForEach((x)=>Console.WriteLine(x))


//Cast<T> 
	Enumerable.Cast<T>將IEnumerable轉換成Enumerable<T>	

//LINQ
	1.資料來源
		IEnumerable<T>
		IQueryable<T>
		Enumerable.Cast<T> 或 在查詢中的from子句，宣告範圍變數的類型，如：
		var qry = arrayList.Cast<string>().OrderBy( s => s).Select( s => s);
		var qry = from string s in arrayList orderby s select s ;
	2.查詢(一般狀況非立即執行)
		from 
		where
		select
		加入彙總函數：Count(), Max(), Average(), First()，將立即執行
	  強制立即執行：
		List<string> qry = (from string s in arrayList orderby s select s).ToList();
		var qry = ( from string s in arrayList orderby s select s).ToArray();
	3.執行查詢
	
	
//PropertyInfo
