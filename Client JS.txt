dx
	Client: 
	命名
		upper camel case (Pascal命名法)
		
	屬性
		//取值 
			control.GetText()
		//設值 
			control.SetText()
		
		//Disable
			control.SetEnabled(false) <-> 後端: control.ClientEnabled = true;
		
		
		//dx自訂client js 屬性
			須先在server設定
				server control.JSProperties["cpXXX"] 命名以小寫 cp 開頭
													 直接指定值
		    前端使用
				control.cpXXX 

			
		//停止postback	
			e.processOnServer=false; 

	樣式		
		//不顯示，但元素存在
			aspxlabel : width=0, height=0
			aspxtextbox : style="visibility:hidden"
		
		//設定dx元件樣式，style為HTML DOM Style Object  https://www.w3schools.com/jsref/dom_obj_style.asp
			ASPxTextBox.GetInputElement().style
		
	元件
		//判斷元件是否存在, 必須以三個條件判斷，尤其是第3個一定要存在!!!!
		if(typeof ClientInstanceName !== "undefined" && ASPxClientUtils.IsExists(ClientInstanceName) && ClientInstanceName.GetMainElement() ){
		
		//ASPxPanel
			取得顯示與否
				GetVisible()
		
		//ASPxComboBox
			//設值
				ASPxComboBox.SetSelectedItem(ddlTypes.FindItemByText(content));
			//取值
				ASPxComboBox.GetInputElement().value
				
		//ASPxListBox 
			計算項目個數
				listBox.GetItemCount()
					
			取得項目文字
				listBox.GetItem(i).text
			
		//RadioButtonList 多選清單		
			取得點選index: GetSelectedIndex()
			清空點選: SetSelectedItem(null)
						 
		//Button
			執行click動作
				btn.DoClick();
		
			前端按鈕html格式
				<input name="btnname">
				
			btn.SetEnabled(false); => 會造成無法 postback !!
	
		//ASPxGridView
			filter:
				grid.ClearFilter();
		
		//ASPxPopupControl
			彈跳視窗顯示方法
				ASPxPopupControl1.Show();  -> server: ShowOnPageLoad = true;
				ASPxPopupControl1.Hide();  -> server: ShowOnPageLoad = false;
			設定標題
				ASPxPopupControl1.SetHeaderText('header');
			
	Server:		
		若callback要執行前端script，無法使用ScriptManager.RegisterStartupScript，需使用dx:ASPxGlobalEvents
		
			<dx:ASPxGlobalEvents ID="ASPxGlobalEvents1" runat="server">
				<ClientSideEvents EndCallback="function(s, e) {
						test(); //呼叫寫好的function
				}" />
			</dx:ASPxGlobalEvents>
		
		
		若預設屬性要修改，如設定css，必須在後端處理，否則postback回來，仍還原成預設值!!
		
		
		若gridview在updatepanel內，要觸發OnCustomButtonCallback，須設定 EnableCallBacks="false"，否則無法更新畫面
		
		
jQuery
	ref: https://ithelp.ithome.com.tw/users/20067050/articles?page=1
	
	元素存在 null object 
		selector.length !==0
	
	selector
		$("元素[屬性1='值1'][屬性2='值2']")
		
			依屬性的值尋找元素
				$("td[title='value']").text()
			
			尋找屬性id的值，開頭為某字串的元素
				$("div[id^='keyword']")
			，結尾為某字串的元素
				$("div[id$='keyword']")
			，包含為某字串的元素
				$("div[id*='keyword']")

		依符合字串尋找元素
			$("div:contains('all string')").filter(function(){ return $(this).text() == 'all string';})
		
	
	Traverse
		尋找上一層最近的父元素
			.closest()
		
		find('tr:eq(0)').text()
		find('td:eq(0)').text()	
		
		$element.map(function(val){
				return 
			});
	
	Attribute
		移除css屬性值
			.css('display','')
			
		新增/移除css class
			.addClass('classname')
			.removeClass('classname')
			
	Event
			//不適用動態產生的元件
			$(selector).click(function(event){ });
			
			
			//適用動態產生的元件  jQuery v1.7+
			$(selector).on(eventName, [childSelector], [ {data} ], [ function(event){} ] );
			
				//綁定在document下的動態元件事件 會 work
				$(document).on("click", "#dynamicElementId", function(event){});
				
				//直接綁定動態元件的事件  不一定會work !!!
				$("#dynamicElementId").on("click", function(event){});
			

			//阻止事件
				event.stopPropagation();		//阻止dom tree上一層事件
				
				
				return false; 					//阻止全部dom tree事件
				等於
					event.stopPropagation();
					event.preventDefault();
					傳回值並停止函式
				
				event.stopImmediatePropagation; //阻止全部dom tree事件 
				
					<!--常用於很繁雜的程式，同一個物件可能會有重複相同的事件操作-->
					
					<div id="TestDiv">
						<a class="menu" href="http://www.google.com.tw/">Click This</a>
					</div>
					<script>
						$(document).ready(function(){
						
							//Click #TestDiv .menu 會顯示 456
							$("#TestDiv").click(function(){
								alert("123");
							});
							$("#TestDiv .menu").click(function(e){
								alert("456");
								e.stopImmediatePropagation();
							});
							$("#TestDiv").click(function(){
								alert("789");
							});
							$("#TestDiv .menu").click(function(){
								alert("321");          
							});
						});
					</script>	
				
		
	.ajax()
		contentType: 'application/json'    //傳送內容至伺服端的格式
		dataType: 'json'				   //傳回至客戶端的格式	
		data: JSON.stringify(para)		   //傳送至伺服端的參數	

js	
	//Selector
		getElementById("id")
		//元素陣列
		getElementsByTagName("div")[i]
		getElementsByClassName("classNmae")[i]
		
		
	//判斷元件是否存在
		if( typeof element !== undefined )
	
	//判斷元件是否存在，且是否有null值
		if( !element ) 
	
	
	//HTML DOM Style 	https://www.w3schools.com/Jsref/dom_obj_style.asp
		style.color
		style.backgroundColor
		
	
	//string to number
		Number(string) //小數點、整數
	
	
	//判斷數值
		isNaN(value) === false  為數值
	
	
	//Date
		//判斷格式
			if(isNaN(Date.parse(value))==true)
				alert("格式錯誤");
		//現在時間型別
			new Date() 
		//某一時間點時間型別
			new Date(date)			
		//時間比較
			new Date(time1) < new Date()
		//日期比較
			Date.parse(date1) < Date.parse((new Date()).toDateString())

	//事件
		捕獲(傳遞)  (從document開發觸發，依次往下傳遞，觸發，直到當前元件)
		element1.addEventListener('click',doSomething2,true)
		
		冒泡(傳遞)  (當前元件觸發事件，依次往上傳遞，觸發，直到document)
		element2.addEventListener('click',doSomething,false)
		element1.onclick = doSomething2;
		
		
		//阻止事件，但不會阻止預設行為!!
			event.stopPropagation();		
			
		//阻止預設行為，但不會阻止事件
			event.preventDefault();

			
		
	//顯示yes or no對話方塊
		if(confirm('msg')){ 
			yes 
		}else{ 
			no 
		}
	
	//async / await 
	//https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Statements/async_function
		ES2017(ES8)
		async function test(){
			await func1(); //先執行 func1完，再執行func2
			await func2();
		}
		
		test().then( ()=>{} );
	
	
	<a href=javascript:void(function_name()) />
	
CSS
	display:none
		js無法找到內容元素
		
	有寫width:100% 會占滿網頁寬度
	沒有寫，會自動調整