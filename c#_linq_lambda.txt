Linq   							.net4.0之後才支援Oracle
	Language-Integrated Query
	整合式查詢語言
	一系列的擴充方法, 藉由統一的資料存取模型，以相同的模式存取各種不同型態的資料來源

擴充方法	
	1. 必須是撰寫在靜態類別中的靜態方法
	2. 第一個參數必須用 this 關鍵字修飾
	3. 不可以定義在巢狀類別或泛型類別中
	

標準查詢運算子(Standard Query Operators)
應用於集合類別的運算子，它對集合實作了篩選、組合、排序..等等的運算功能，
像是Select、Where、OrderBy...等方法，
而這些方法就是運作於IEnumerable<T>、IQueryable<T>之上

	
查詢運算式（Query Expressions）
inner join 

	var clients = from c in ctx.Clients
				  from g in ctx.Gruops where c.GroupID == g.ID orderby g.Name
				  select new 
				  {
					c.groupID,
					c.ComputerName,
					GroupName = g.Name
				  };

	var clients = from c in ctx.Clients
				  join g in ctx.Groups on c.GroupID = g.ID into result
				  from r in result orderby r.Name
				  select new 
				  {
					c.groupID,
					c.ComputerName,
					GroupName = r.Name
				  };
			  
left join
		
	var client = from c in ctx.Clients where c.Status ==1
				 select new 
				 {
					c.groupID,
					c.ComputerName,
					GroupName = (from g in ctx.Groups where g.ID == c.GroupID 
					             select g.Name)
								.FirstOrDefault()
				 };
	

count 

		var result = from c in ctx.Clients group c by c.Status into r
					 orderby r.Count() desceding
					 select new 
					 {
						status = r.Key,
						Count = r.Count()
					 };

					 
					
Method based Query(方法架構查詢)    (使用Lambda 運算式(匿名委派再簡化))
inner join 		  

	var clients = ctx.Clients.Where(c => c.Status ==1)
							 .Join(ctx.Groups, 		  	//要加入的來源
										   c => c.GroupID,    //主表要join的值
										   g => g.ID,         //次表要join的值
											   (c,g) => new 	  //(c,g)代表將資料集合起來
													   {
															c.groupID,
															c.ComputerNamae,
															GroupName = g.Name
													   })
							 .OrderBy( cg => cg.GroupName)
							 .ToList();
	
left join 
	
	var clients = ctx.Client.Where(c=>c.Status ==1)
							.Select( c=> new
							{
								c.GroupID,
								c.ComputerName,
								GroupName = ctx.Groups.FirstOrDefault(g=>g.ID==c.GroupID).Name
							})
							.ToList();
							

count 
	
	var client = ctx.Clients.GroupBy(c=>c.Status)
							.Select(s=>new{
								Status = s.Key,
								Count = s.Count()
							})
							.OrderByDescending(r=>r.Count);


Trace SQL
							
using (var ctx = new TestDBEntities)
{
	var query = ctx.Clients.Where(c=> c.Status==1)
							.OrderBy(c=>c.ComputerName);
							
	Debug.WriteLine((query as ObjectQuery).ToTraceString());
	
	foreach( var client in query)
	{
	}
}							